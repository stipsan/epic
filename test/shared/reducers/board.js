import expect from 'expect'
import { board as reducer } from '../../../shared/reducers/board'
import * as types from '../../../shared/constants/ActionTypes'

describe('board reducer', () => {
  it('should return the initial state', () => {
    expect(
      reducer(undefined, {}).toJS()
    ).toEqual(
      {
        grid: [
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ],
        xl:  [0, -1, -1, -1, -1, -1],
        l:   [0, -1, -1, -1, -1],
        m1:  [0, -1, -1, -1],
        m2:  [0, -1, -1, -1],
        s1:  [0, -1, -1],
        s2:  [0, -1, -1],
        xs1: [0, -1],
        xs2: [0, -1]
      }
    )
  })
  
  it('should place items', () => {
    const placedXl = reducer(undefined, {
      type: types.ADD_ITEM,
      item: 'xl',
      position: [2,3]
    })
    expect(
      placedXl.toJS()
    ).toEqual(
      {
        grid: [
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 1, 1, 1, 1, 1, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ],
        xl:  [0, 32, 33, 34, 35, 36],
        l:   [0, -1, -1, -1, -1],
        m1:  [0, -1, -1, -1],
        m2:  [0, -1, -1, -1],
        s1:  [0, -1, -1],
        s2:  [0, -1, -1],
        xs1: [0, -1],
        xs2: [0, -1]
      }
    )
    const placedL = reducer(placedXl, {
      type: types.ADD_ITEM,
      item: 'l',
      position: [1,2]
    })
    expect(
      placedL.toJS()
    ).toEqual(
      {
        grid: [
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 2, 2, 2, 2, 0, 0, 0, 0, 0,
          0, 0, 1, 1, 1, 1, 1, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ],
        xl:  [0, 32, 33, 34, 35, 36],
        l:   [0, 21, 22, 23, 24],
        m1:  [0, -1, -1, -1],
        m2:  [0, -1, -1, -1],
        s1:  [0, -1, -1],
        s2:  [0, -1, -1],
        xs1: [0, -1],
        xs2: [0, -1]
      }
    )
    const placedM1 = reducer(placedL, {
      type: types.ADD_ITEM,
      item: 'm1',
      position: [8,1],
      rotated: 1
    })
    expect(
      placedM1.toJS()
    ).toEqual(
      {
        grid: [
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 3, 0,
          0, 2, 2, 2, 2, 0, 0, 0, 3, 0,
          0, 0, 1, 1, 1, 1, 1, 0, 3, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ],
        xl:  [0, 32, 33, 34, 35, 36],
        l:   [0, 21, 22, 23, 24],
        m1:  [1, 18, 28, 38],
        m2:  [0, -1, -1, -1],
        s1:  [0, -1, -1],
        s2:  [0, -1, -1],
        xs1: [0, -1],
        xs2: [0, -1]
      }
    )
    const placedM2 = reducer(placedM1, {
      type: types.ADD_ITEM,
      item: 'm2',
      position: [0,5]
    })
    expect(
      placedM2.toJS()
    ).toEqual(
      {
        grid: [
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 3, 0,
          0, 2, 2, 2, 2, 0, 0, 0, 3, 0,
          0, 0, 1, 1, 1, 1, 1, 0, 3, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          4, 4, 4, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ],
        xl:  [0, 32, 33, 34, 35, 36],
        l:   [0, 21, 22, 23, 24],
        m1:  [1, 18, 28, 38],
        m2:  [0, 50, 51, 52],
        s1:  [0, -1, -1],
        s2:  [0, -1, -1],
        xs1: [0, -1],
        xs2: [0, -1]
      }
    )
    const placedS1 = reducer(placedM2, {
      type: types.ADD_ITEM,
      item: 's1',
      position: [5,5],
      rotated: 1
    })
    expect(
      placedS1.toJS()
    ).toEqual(
      {
        grid: [
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 3, 0,
          0, 2, 2, 2, 2, 0, 0, 0, 3, 0,
          0, 0, 1, 1, 1, 1, 1, 0, 3, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          4, 4, 4, 0, 0, 5, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 5, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ],
        xl:  [0, 32, 33, 34, 35, 36],
        l:   [0, 21, 22, 23, 24],
        m1:  [1, 18, 28, 38],
        m2:  [0, 50, 51, 52],
        s1:  [1, 55, 65],
        s2:  [0, -1, -1],
        xs1: [0, -1],
        xs2: [0, -1]
      }
    )
    
    const placedS2 = reducer(placedS1, {
      type: types.ADD_ITEM,
      item: 's2',
      position: [6,7]
    })
    expect(
      placedS2.toJS()
    ).toEqual(
      {
        grid: [
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 3, 0,
          0, 2, 2, 2, 2, 0, 0, 0, 3, 0,
          0, 0, 1, 1, 1, 1, 1, 0, 3, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          4, 4, 4, 0, 0, 5, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 5, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 6, 6, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ],
        xl:  [0, 32, 33, 34, 35, 36],
        l:   [0, 21, 22, 23, 24],
        m1:  [1, 18, 28, 38],
        m2:  [0, 50, 51, 52],
        s1:  [1, 55, 65],
        s2:  [0, 76, 77],
        xs1: [0, -1],
        xs2: [0, -1]
      }
    )
    
    const placedXs1 = reducer(placedS2, {
      type: types.ADD_ITEM,
      item: 'xs1',
      position: [0,0]
    })
    expect(
      placedXs1.toJS()
    ).toEqual(
      {
        grid: [
          7, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 3, 0,
          0, 2, 2, 2, 2, 0, 0, 0, 3, 0,
          0, 0, 1, 1, 1, 1, 1, 0, 3, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          4, 4, 4, 0, 0, 5, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 5, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 6, 6, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ],
        xl:  [0, 32, 33, 34, 35, 36],
        l:   [0, 21, 22, 23, 24],
        m1:  [1, 18, 28, 38],
        m2:  [0, 50, 51, 52],
        s1:  [1, 55, 65],
        s2:  [0, 76, 77],
        xs1: [0, 0],
        xs2: [0, -1]
      }
    )
    
    const placedXs2 = reducer(placedXs1, {
      type: types.ADD_ITEM,
      item: 'xs2',
      position: [9,9]
    })
    expect(
      placedXs2.toJS()
    ).toEqual(
      {
        grid: [
          7, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 3, 0,
          0, 2, 2, 2, 2, 0, 0, 0, 3, 0,
          0, 0, 1, 1, 1, 1, 1, 0, 3, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          4, 4, 4, 0, 0, 5, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 5, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 6, 6, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 8,
        ],
        xl:  [0, 32, 33, 34, 35, 36],
        l:   [0, 21, 22, 23, 24],
        m1:  [1, 18, 28, 38],
        m2:  [0, 50, 51, 52],
        s1:  [1, 55, 65],
        s2:  [0, 76, 77],
        xs1: [0, 0],
        xs2: [0, 99]
      }
    )
    
  })
  
  it('should not add items with x = -1', () => {
    expect(
      reducer(undefined, {
        type: types.ADD_ITEM,
        item: 'xl',
        position: [-1,0]
      }).toJS()
    ).toEqual(
      {
        grid: [
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ],
        xl:  [0, -1, -1, -1, -1, -1],
        l:   [0, -1, -1, -1, -1],
        m1:  [0, -1, -1, -1],
        m2:  [0, -1, -1, -1],
        s1:  [0, -1, -1],
        s2:  [0, -1, -1],
        xs1: [0, -1],
        xs2: [0, -1]
      }
    )
    
  })
  it('should not add items with y = -1', () => {
    expect(
      reducer(undefined, {
        type: types.ADD_ITEM,
        item: 'xl',
        position: [0,-1]
      }).toJS()
    ).toEqual(
      {
        grid: [
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ],
        xl:  [0, -1, -1, -1, -1, -1],
        l:   [0, -1, -1, -1, -1],
        m1:  [0, -1, -1, -1],
        m2:  [0, -1, -1, -1],
        s1:  [0, -1, -1],
        s2:  [0, -1, -1],
        xs1: [0, -1],
        xs2: [0, -1]
      }
    )

  })
  it('should not add items with x >= 10', () => {
    expect(
      reducer(undefined, {
        type: types.ADD_ITEM,
        item: 'xl',
        position: [10,5],
        rotated: 1
      }).toJS()
    ).toEqual(
      {
        grid: [
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ],
        xl:  [0, -1, -1, -1, -1, -1],
        l:   [0, -1, -1, -1, -1],
        m1:  [0, -1, -1, -1],
        m2:  [0, -1, -1, -1],
        s1:  [0, -1, -1],
        s2:  [0, -1, -1],
        xs1: [0, -1],
        xs2: [0, -1]
      }
    )
  })
  it('should not add items with y >= 10', () => {
    expect(
      reducer(undefined, {
        type: types.ADD_ITEM,
        item: 'xl',
        position: [0,10]
      }).toJS()
    ).toEqual(
      {
        grid: [
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ],
        xl:  [0, -1, -1, -1, -1, -1],
        l:   [0, -1, -1, -1, -1],
        m1:  [0, -1, -1, -1],
        m2:  [0, -1, -1, -1],
        s1:  [0, -1, -1],
        s2:  [0, -1, -1],
        xs1: [0, -1],
        xs2: [0, -1]
      }
    )
  })
  it('should prevent larger items from causing x-axis overflow', () => {
    expect(
      reducer(undefined, {
        type: types.ADD_ITEM,
        item: 'xl',
        position: [6,9]
      }).toJS()
    ).toEqual(
      {
        grid: [
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ],
        xl:  [0, -1, -1, -1, -1, -1],
        l:   [0, -1, -1, -1, -1],
        m1:  [0, -1, -1, -1],
        m2:  [0, -1, -1, -1],
        s1:  [0, -1, -1],
        s2:  [0, -1, -1],
        xs1: [0, -1],
        xs2: [0, -1]
      }
    )
  })
  it('should prevent larger items from causing y-axis overflow', () => {
    expect(
      reducer(undefined, {
        type: types.ADD_ITEM,
        item: 'xl',
        position: [5,9],
        rotated: 1
      }).toJS()
    ).toEqual(
      {
        grid: [
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ],
        xl:  [0, -1, -1, -1, -1, -1],
        l:   [0, -1, -1, -1, -1],
        m1:  [0, -1, -1, -1],
        m2:  [0, -1, -1, -1],
        s1:  [0, -1, -1],
        s2:  [0, -1, -1],
        xs1: [0, -1],
        xs2: [0, -1]
      }
    )
  })
  it('should prevent adding already added item', () => {
    expect(
      reducer(reducer(undefined, {
        type: types.ADD_ITEM,
        item: 'xs1',
        position: [0,0]
      }), {
        type: types.ADD_ITEM,
        item: 'xs1',
        position: [1,0]
      }).toJS()
    ).toEqual(
      {
        grid: [
          7, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ],
        xl:  [0, -1, -1, -1, -1, -1],
        l:   [0, -1, -1, -1, -1],
        m1:  [0, -1, -1, -1],
        m2:  [0, -1, -1, -1],
        s1:  [0, -1, -1],
        s2:  [0, -1, -1],
        xs1: [0, 0],
        xs2: [0, -1]
      }
    )
  })
})